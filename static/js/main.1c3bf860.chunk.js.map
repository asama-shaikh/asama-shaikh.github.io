{"version":3,"sources":["Utilities.js","App.js","serviceWorker.js","index.js"],"names":["toTuple","y","x","drawPoint","ctx","r","color","beginPath","arc","Math","PI","fillStyle","fill","drawSegment","scale","ay","ax","by","bx","moveTo","lineTo","lineWidth","strokeStyle","stroke","App","webcamRef","useRef","canvasRef","useState","checked3","setChecked3","checked1","setChecked1","checked2","setChecked2","runBodysegment","a","posenet","net1","bodyPix","net","setInterval","detect","drawResult","pose","video","videoWidth","videoHeight","canvas","current","getContext","keypoints","minConfidence","i","length","keypoint","score","position","drawKeypoints","adjacentKeyPoints","forEach","drawSkeleton","readyState","width","height","opacity","flipHorizontal","maskBlurAmount","console","log","segmentPersonParts","person","coloredPartImage","estimateSinglePose","style","display","flexDirection","marginLeft","marginTop","src","className","onChange","checked","background","ref","marginRight","left","right","textAlign","zindex","backgroud","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1c3bf860.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as posenet from \"@tensorflow-models/posenet\";\nimport * as tf from \"@tensorflow/tfjs\";\n\n\nconst color = \"aqua\";\n//const color = \"red\";\nconst boundingBoxColor = \"red\";\nconst lineWidth = 3;\n\nexport const tryResNetButtonName = \"tryResNetButton\";\nexport const tryResNetButtonText = \"[New] Try ResNet50\";\nconst tryResNetButtonTextCss = \"width:100%;text-decoration:underline;\";\nconst tryResNetButtonBackgroundCss = \"background:#e61d5f;\";\n\nfunction isAndroid() {\n  return /Android/i.test(navigator.userAgent);\n}\n\nfunction isiOS() {\n  return /iPhone|iPad|iPod/i.test(navigator.userAgent);\n}\n\nexport function isMobile() {\n  return isAndroid() || isiOS();\n}\n\nfunction setDatGuiPropertyCss(propertyText, liCssString, spanCssString = \"\") {\n  var spans = document.getElementsByClassName(\"property-name\");\n  for (var i = 0; i < spans.length; i++) {\n    var text = spans[i].textContent || spans[i].innerText;\n    if (text == propertyText) {\n      spans[i].parentNode.parentNode.style = liCssString;\n      if (spanCssString !== \"\") {\n        spans[i].style = spanCssString;\n      }\n    }\n  }\n}\n\nexport function updateTryResNetButtonDatGuiCss() {\n  setDatGuiPropertyCss(\n    tryResNetButtonText,\n    tryResNetButtonBackgroundCss,\n    tryResNetButtonTextCss\n  );\n}\n\n/**\n * Toggles between the loading UI and the main canvas UI.\n */\nexport function toggleLoadingUI(\n  showLoadingUI,\n  loadingDivId = \"loading\",\n  mainDivId = \"main\"\n) {\n  if (showLoadingUI) {\n    document.getElementById(loadingDivId).style.display = \"block\";\n    document.getElementById(mainDivId).style.display = \"none\";\n  } else {\n    document.getElementById(loadingDivId).style.display = \"none\";\n    document.getElementById(mainDivId).style.display = \"block\";\n  }\n}\n\nfunction toTuple({ y, x }) {\n  return [y, x];\n}\n\nexport function drawPoint(ctx, y, x, r, color) {\n  ctx.beginPath();\n  ctx.arc(x, y, r, 0, 2 * Math.PI);\n  ctx.fillStyle = color;\n  ctx.fill();\n}\n\n/**\n * Draws a line on a canvas, i.e. a joint\n */\nexport function drawSegment([ay, ax], [by, bx], color, scale, ctx) {\n  ctx.beginPath();\n  ctx.moveTo(ax * scale, ay * scale);\n  ctx.lineTo(bx * scale, by * scale);\n  ctx.lineWidth = lineWidth;\n  ctx.strokeStyle = color;\n  ctx.stroke();\n}\n\n/**\n * Draws a pose skeleton by looking up all adjacent keypoints/joints\n */\nexport function drawSkeleton(keypoints, minConfidence, ctx, scale = 1) {\n  const adjacentKeyPoints = posenet.getAdjacentKeyPoints(\n    keypoints,\n    minConfidence\n  );\n\n  adjacentKeyPoints.forEach((keypoints) => {\n    drawSegment(\n      toTuple(keypoints[0].position),\n      toTuple(keypoints[1].position),\n      color,\n      scale,\n      ctx\n    );\n  });\n}\n\n/**\n * Draw pose keypoints onto a canvas\n */\nexport function drawKeypoints(keypoints, minConfidence, ctx, scale = 1) {\n  for (let i = 0; i < keypoints.length; i++) {\n    const keypoint = keypoints[i];\n\n    if (keypoint.score < minConfidence) {\n      continue;\n    }\n\n    const { y, x } = keypoint.position;\n    drawPoint(ctx, y * scale, x * scale, 3, color);\n  }\n}\n\n/**\n * Draw the bounding box of a pose. For example, for a whole person standing\n * in an image, the bounding box will begin at the nose and extend to one of\n * ankles\n */\nexport function drawBoundingBox(keypoints, ctx) {\n  const boundingBox = posenet.getBoundingBox(keypoints);\n\n  ctx.rect(\n    boundingBox.minX,\n    boundingBox.minY,\n    boundingBox.maxX - boundingBox.minX,\n    boundingBox.maxY - boundingBox.minY\n  );\n\n  ctx.strokeStyle = boundingBoxColor;\n  ctx.stroke();\n}\n\n/**\n * Converts an arary of pixel data into an ImageData object\n */\nexport async function renderToCanvas(a, ctx) {\n  const [height, width] = a.shape;\n  const imageData = new ImageData(width, height);\n\n  const data = await a.data();\n\n  for (let i = 0; i < height * width; ++i) {\n    const j = i * 4;\n    const k = i * 3;\n\n    imageData.data[j + 0] = data[k + 0];\n    imageData.data[j + 1] = data[k + 1];\n    imageData.data[j + 2] = data[k + 2];\n    imageData.data[j + 3] = 255;\n  }\n\n  ctx.putImageData(imageData, 0, 0);\n}\n\n/**\n * Draw an image on a canvas\n */\nexport function renderImageToCanvas(image, size, canvas) {\n  canvas.width = size[0];\n  canvas.height = size[1];\n  const ctx = canvas.getContext(\"2d\");\n\n  ctx.drawImage(image, 0, 0);\n}\n\n/**\n * Draw heatmap values, one of the model outputs, on to the canvas\n * Read our blog post for a description of PoseNet's heatmap outputs\n * https://medium.com/tensorflow/real-time-human-pose-estimation-in-the-browser-with-tensorflow-js-7dd0bc881cd5\n */\nexport function drawHeatMapValues(heatMapValues, outputStride, canvas) {\n  const ctx = canvas.getContext(\"2d\");\n  const radius = 5;\n  const scaledValues = heatMapValues.mul(tf.scalar(outputStride, \"int32\"));\n\n  drawPoints(ctx, scaledValues, radius, color);\n}\n\n/**\n * Used by the drawHeatMapValues method to draw heatmap points on to\n * the canvas\n */\nfunction drawPoints(ctx, points, radius, color) {\n  const data = points.buffer().values;\n\n  for (let i = 0; i < data.length; i += 2) {\n    const pointY = data[i];\n    const pointX = data[i + 1];\n\n    if (pointX !== 0 && pointY !== 0) {\n      ctx.beginPath();\n      ctx.arc(pointX, pointY, radius, 0, 2 * Math.PI);\n      ctx.fillStyle = color;\n      ctx.fill();\n    }\n  }\n}\n\n/**\n * Draw offset vector values, one of the model outputs, on to the canvas\n * Read our blog post for a description of PoseNet's offset vector outputs\n * https://medium.com/tensorflow/real-time-human-pose-estimation-in-the-browser-with-tensorflow-js-7dd0bc881cd5\n */\n// export function drawOffsetVectors(\n//     heatMapValues, offsets, outputStride, scale = 1, ctx) {\n//   const offsetPoints =\n//       posenet.singlePose.getOffsetPoints(heatMapValues, outputStride, offsets);\n\n//   const heatmapData = heatMapValues.buffer().values;\n//   const offsetPointsData = offsetPoints.buffer().values;\n\n//   for (let i = 0; i < heatmapData.length; i += 2) {\n//     const heatmapY = heatmapData[i] * outputStride;\n//     const heatmapX = heatmapData[i + 1] * outputStride;\n//     const offsetPointY = offsetPointsData[i];\n//     const offsetPointX = offsetPointsData[i + 1];\n\n//     drawSegment(\n//         [heatmapY, heatmapX], [offsetPointY, offsetPointX], color, scale, ctx);\n//   }\n// }\n","// 1. Install dependencies\n// 2. Import dependencies\n// 3. Setup webcam and canvas\n// 4. Define references to those\n// 5. Load handpose\n// 6. Detect function\n// 7. Draw using drawMask\n//https://storage.googleapis.com/tfjs-models/demos/body-pix/index.html\nimport React, { useRef, useState  } from \"react\";\n// import logo from './logo.svg';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as bodyPix from \"@tensorflow-models/body-pix\";\nimport * as posenet from '@tensorflow-models/posenet';\nimport { drawKeypoints, drawSkeleton } from \"./Utilities\";\nimport Webcam from \"react-webcam\";\nimport Switch from \"react-switch\";\n//import ToggleButton from 'react-toggle-button';\nimport \"./App.css\";\n\nfunction App() {\n    const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\nconst [count, setCount] = useState(0);\nconst [checked3, setChecked3] = useState(true);\nconst [checked1, setChecked1] = useState(true);\nconst [checked2, setChecked2] = useState(false);\n\n  const runBodysegment = async () => {\n    const net1 = await posenet.load();\n    const net = await bodyPix.load();\n    //console.log(\"BodyPix model loaded.\");\n    //  Loop and detect hands\n    setInterval(() => {\n      detect(net,net1);\n    }, 100);\n  };\n\n  const drawResult = (pose, video, videoWidth, videoHeight, canvas) => {\n    const ctx = canvas.current.getContext(\"2d\");\n    \n    //canvas.current.width = videoWidth;\n    //canvas.current.height = videoHeight;\n    //ctx.fillStyle = \"white\";\n    //ctx.fillRect(0, 0, videoWidth, videoHeight);\n    drawKeypoints(pose[\"keypoints\"], 0.6, ctx);\n    drawSkeleton(pose[\"keypoints\"], 0.7, ctx);\n  };\n\n  const detect = async (net,net1) => {\n    // Check data is available\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // Set video width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      // Set canvas height and width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      // Make Detections\n      // * One of (see documentation below):\n      // *   - net.segmentPerson\n      // *   - net.segmentPersonParts\n      // *   - net.segmentMultiPerson\n      // *   - net.segmentMultiPersonParts\n      // const person = await net.segmentPerson(video);\n      \n      //console.log(person);\n\n      // const coloredPartImage = bodyPix.toMask(person);\n      //const poses = posenet.toColoredPartMask(pose);\n\n      \n\n      \n      const opacity = 0.7;\n      const flipHorizontal = false;\n      const maskBlurAmount = 0;\n      const canvas = canvasRef.current;\n      const flow = true;\n\n      // show body parts as well\n      console.log('asdddddddd############',checked1,checked2);\n      if(flow) {\n      const person = await net.segmentPersonParts(video);\n      const coloredPartImage = bodyPix.toColoredPartMask(person);\n      bodyPix.drawMask(\n        canvas,\n        video,\n        coloredPartImage,\n        opacity,\n        maskBlurAmount,\n        flipHorizontal\n      );\n    } else {\n\n      const pose = await net1.estimateSinglePose(video);\n//       const imageScaleFactor = 0.50;\n// const flipHorizontal = false;\n// const outputStride = 16;\n// // get up to 5 poses\n// const maxPoseDetections = 5;\n// // minimum confidence of the root part of a pose\n// const scoreThreshold = 0.5;\n// // minimum distance in pixels between the root parts of poses\n// const nmsRadius = 20;\n//       const pose = await net1.estimateMultiplePoses(video, flipHorizontal, outputStride,    \n//   maxPoseDetections, scoreThreshold, nmsRadius);\n//       console.log(pose);\n      \n      drawResult(pose, null, videoWidth, videoHeight, canvasRef);\n      }\n      \n    }\n  };\n\n  runBodysegment();\n\n\n\n\n\n  return (\n    \n    <div style={{display:'flex', flexDirection:'row'}}>\n    <div style={{marginLeft: '20px', marginTop:'50px'}}>\n    <img style={{marginLeft: '80px',width:'120px', height:'120px'}} src=\"https://rdnational.ac.in/img/logo.png\" />\n      <h2>R. D. National & W. A. Science College</h2>\n      <h3>Asama Mohammad Ishaque Shaik</h3>\n      <h3> M.Sc IT 2020-2021 </h3>\n      \n      <label>\n        <span>Show Video Feed :</span>\n        <Switch className=\"react-switch\" onChange={() => setChecked3(!checked3)} checked={checked3} />\n      </label>\n      <br />\n      <br />\n      <label>\n        <span>Show Body Segment :</span>\n        <Switch className=\"react-switch\" onChange={() => setChecked1(!checked1)} checked={checked1} />\n      </label>\n      <br />\n      <br />\n      <label>\n        <span>Show Position :</span>\n        <Switch className=\"react-switch\" onChange={() => setChecked2(!checked2)} checked={checked2} />\n      </label>\n    </div>\n    <div  style={{background:'yellow'}}>\n\n        <Webcam\n          ref={webcamRef}\n          style={{\n            //display:'none',\n            position: \"fixed\",\n            marginLeft: \"500px\",\n            marginRight: \"170px\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: !checked3 ? 10: 640,\n            height: !checked3 ? 10: 580,\n          }}\n        />\n\n        <canvas\n          ref={canvasRef}\n          style={{\n            backgroud: 'black',\n            position: \"fixed\",\n            marginLeft: \"500px\",\n            marginRight: \"170px\",\n            marginTop: '50px',\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n      \n      \n    </div></div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App style={{background:'yellow'}}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}